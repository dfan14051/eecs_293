package numbers;

import java.util.Arrays;
import java.util.List;

public class Number {
	static final Number ONE = new Number(Arrays.asList("   ", "  |", "  |"), 1);
	static final Number TWO = new Number(Arrays.asList(" _ ", " _|", "|_ "), 2);
	static final Number THREE = new Number(Arrays.asList(" _ ", " _|", " _|"), 3);
	static final Number FOUR = new Number(Arrays.asList("   ", "|_|", "  |"), 4);
	static final Number FIVE = new Number(Arrays.asList(" _ ", "|_ ", " _|"), 5);
	static final Number SIX = new Number(Arrays.asList(" _ ", "|_ ", "|_|"), 6);
	static final Number SEVEN = new Number(Arrays.asList(" _ ", "  |", "  |"), 7);
	static final Number EIGHT = new Number(Arrays.asList(" _ ", "|_|", "|_|"), 8);
	static final Number NINE = new Number(Arrays.asList(" _ ", "|_|", " _|"), 9);
	static final Number ZERO = new Number(Arrays.asList(" _ ", "| |", "|_|"), 0);
	static final List<Number> NUMBERS = Arrays.asList(Number.ONE, Number.TWO, Number.THREE, Number.FOUR, Number.FIVE,
			Number.SIX, Number.SEVEN, Number.EIGHT, Number.NINE, Number.ZERO);
	
	Number(List<String> input){
		this.segments = makeSegments(input);
		this.value = -1;
	}
	private Number(List<String> input, int value){
		this.segments = makeSegments(input);
		this.value = value;
	}
	
	private String[] segments;	
	/**
	 * Autogenerated.
	 * @return the segments
	 */
	public final String[] getSegments() {
		return segments;
	}
	
	private int value;
	/**
	 * Autogenerated.
	 * @return value
	 */
	public final int getValue() {
		return value;
	}


	public String[] makeSegments(List<String> input){
		String[] segmentArray = new String[9];
		try {
			Validator.validateNumberInput(input);
			int row = 0;
			for(String line : input) {
				segmentArray[row * 3] = line.substring(0, 1);
				segmentArray[row * 3 + 1] = line.substring(1, 2);
				segmentArray[row * 3 + 2] = line.substring(2);
				row++;
			}
		} catch (NumberException e) {
			// Fail hard if number input isn't 3x3
			ErrorHandler.logError(e);
			System.exit(1);
		}
		
		return segmentArray;
	}
	
	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.hashCode(segments);
		result = prime * result + value;
		return result;
	}
	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Number other = (Number) obj;
		if (!Arrays.equals(segments, other.segments))
			return false;
		return true;
	}
}
