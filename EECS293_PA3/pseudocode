This method calculates the estimated delivery time given arguments with their durations and requirements. Returns -1 if there are cyclic requirements.

List nodes;
List assignments;

int calculateEstimatedDeliveryTime( List Assignments ) {
  nodes = loadGraphWithNodes(Assignments);
  assignments = Assignments;
  boolean change <- true
  while(change) {
    change <- false
    for each Assignment a {
      addDependencies(a);
    }
    if containsCycle(nodes){
      return -1;
    }
  }
  topologicalSort by max nodes
  return nodes[0].time
}

List loadGraphWithNodes( List Assignments ){
  List nodes;
  for each Assignment a {
    beginA <- new Node with time 0 and nextNode null;
    endA <- new Node with time (beginA + A.duration) and nextNode null;
    add endA to beginA.nextNodes;
    add beginA and endA to nodes;
  }
  return nodes;
}

boolean addDependencies( Assignment assignment ){
  for each Dependency d in assignment{
    if applyDependency(assignment, d) is false{
      return false;
    }
  }
  return true;
}

boolean applyDependency( Assignment assignment, Dependency dependency ){
  if dependency.type = END-BEGIN {
    return applyDependencyType(assignment, dependency, 0, 1);
  }
  else if dependency.type = BEGIN-BEGIN{
    return applyDependencyType(assignment, dependency, 0, 0);
  }
  else if dependency.type = BEGIN-END{
    return applyDependencyType(assignment, dependency, 1, 0);
  }
  else{
    return applyDependencyType(assignment, dependency, 1, 1);
  }
}

boolean applyDependencyType( Assignment assignment,
                            Dependency dependency,
                            int assignmentAdjustment,
                            int dependencyAdjustment ){
  dependencyNodeIndex = getAssignmentNode(dependency.dependsOnAssignment) + dependencyAdjustment;
  assignmentNodeIndex = getAssignmentNode(assignment) + assignmentAdjustment;
  if(nodes[dependencyNodeIndex].nextNodes has nodes[assignmentNodeIndex]){
    return false;
  }
  else{
    nodes[dependencyNodeIndex].nextNodes add nodes[assignmentNodeIndex];
    nodes[assignmentNodeIndex].time = nodes[dependencyNodeIndex].time;
    if(assignmentAdjustment = 0){
      nodes[assignmentNodeIndex + 1].time = nodes[assignmentNodeIndex].time + assignment.duration;
    }
    return true;
  }
}

int getAssignmentNode( Assignment assignment ){
  int index = assignments get index of assignment
  return 2 * index
}

class Node {
  int time;
  Set nextNodes;
}

class Assignment {
  int duration;
  Set dependencies;
  class Dependency {
    enum type{ END-BEGIN, BEGIN-BEGIN, BEGIN-END, END-END }
    Assignment dependsOnAssignment
  }
}
